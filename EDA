# Install requirements with:
# pip install torch torchvision scikit-learn matplotlib seaborn tqdm

import time
import torch
import torch.nn as nn
import torch.optim as optim
import torchvision
import torchvision.transforms as transforms
from tqdm import tqdm
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.metrics import classification_report, confusion_matrix

# Automatically download and load MNIST data
transform = transforms.Compose([transforms.ToTensor()])
train_set = torchvision.datasets.MNIST(root='./data', train=True, download=True, transform=transform)
test_set = torchvision.datasets.MNIST(root='./data', train=False, download=True, transform=transform)

train_loader = torch.utils.data.DataLoader(train_set, batch_size=64, shuffle=True)
test_loader = torch.utils.data.DataLoader(test_set, batch_size=1000, shuffle=False)

# Exploratory Data Analysis (EDA)
print("EDA Reports:")
print("- Train data size:", len(train_set))
print("- Test data size:", len(test_set))

# Check distribution of classes
labels = train_set.targets.numpy()
unique, counts = np.unique(labels, return_counts=True)
class_dist = dict(zip(unique, counts))
print("- Class distribution:", class_dist)

# Plot class distribution
plt.figure(figsize=(10,4))
sns.barplot(x=list(class_dist.keys()), y=list(class_dist.values()))
plt.title("Class distribution in training set")
plt.xlabel("Digit")
plt.ylabel("Count")
plt.show()

# Show sample images
examples = enumerate(train_loader)
batch_idx, (example_data, example_targets) = next(examples)

plt.figure(figsize=(10,4))
for i in range(10):
    plt.subplot(2,5,i+1)
    plt.imshow(example_data[i][0], cmap='gray', interpolation='none')
    plt.title(f"Label: {example_targets[i].item()}")
    plt.axis('off')
plt.tight_layout()
plt.show()